#!/usr/bin/perl -w
#===============================================================================
#
#        Li Xue (), me.lixue@gmail.com
#        07/07/2014 02:58:56 PM
#
#  DESCRIPTION: Given an alignment symbol file, add atomResNum according to the sequence resinum.
#        INPUT 1 (alignment symbol file with SEQ resinum, generated by formatAlignFL{}):
#
#            #Qry_aa Qry_seqResNum Template_aa Template_seqResNum alignment_symbol
#            Q   1   M   1   ***
#            T   2   V   2   **
#

#        INPUT 2: map file for between sequence residue number and atom residue number, generated by PDB2AtomResNum.pl
#
#            #chainID,seqnum,aa,atomResnum
#            A,1,V,2
#            A,2,N,3
#            A,3,P,4
#            A,4,T,5
#            A,5,V,6
#            A,6,F,7
#
#       OUTPUT: a new alignment symbol file with ATOM resinum.
#
#            #Qry_aa Qry_seqResNum Qry_atomResNum Template_aa Template_seqResNum Template_atomResNum alignment_symbol
#            Q   1   9    M   1  110 ***
#            T   2   10   V   2  111 **
#
#===============================================================================

use strict;
use warnings;
use utf8;
use File::Basename;

my $alnSymbolFL = shift @ARGV;
my $mapFL_Qry = shift @ARGV; #map between sequence residue number and atom residue number
my $mapFL_Tem = shift @ARGV; #map between sequence residue number and atom residue number


#--replace the sequence residue number in the contact file with atom residue number
my $map_Q = &readMapFL($mapFL_Qry); #-- $map->{seqNum}=atomResNum
my $map_T = &readMapFL($mapFL_Tem); #-- $map->{seqNum}=atomResNum

print "#generated by mapAtomResNum_4alnSymbolFL.pl\n";
open(INPUT, "<$alnSymbolFL ") or die ("Cannot open $alnSymbolFL:$!");
while(<INPUT>){
    s/[\n\r]//gm;

    if (/^#{0,}Qry_aa/i){
           my @header_tmp =qw (Qry_aa Qry_seqResNum Qry_atomResNum Template_aa Template_seqResNum Template_atomResNum alignment_symbol);
           my $header = join("\t", @header_tmp);
           print "$header\n";
           next;
    }

    if (/^#/){
        print "$_\n";
        next;
    }

    if (/^\s{0,}\w+/){
#            Q   1   M   1   ***
        my ($aa_Q, $seqResiNum_Q, $aa_T, $seqResiNum_T, $symbol) = split(/\s+/, $_);

        if (!defined $symbol){
            die("ERROR: check the format of $alnSymbolFL:$!");
        }

       my $atomResNum_Q=$map_Q->{$seqResiNum_Q};
       my $atomResNum_T=$map_T->{$seqResiNum_T};

       if (!defined $atomResNum_Q){
           die("seqResNum_Q $seqResiNum_Q not found in $mapFL_Qry. Also check alnSymbolFL ($alnSymbolFL):$!");
       }

       if (!defined $atomResNum_T){
           die("seqResNum_T :$seqResiNum_T not found in $mapFL_Tem. Also check alnSymbolFL ($alnSymbolFL):$!");
       }

       my @newLine_tmp = ($aa_Q, $seqResiNum_Q, $atomResNum_Q, $aa_T, $seqResiNum_T, $atomResNum_T, $symbol);
       my $newline = join("\t", @newLine_tmp);
       print "$newline\n";
    }

}

close INPUT;


#--
sub readMapFL{
#    input:
    #chainID,seqnum,aa,atomResnum
#        A,1,V,2
#        A,2,N,3
#        A,3,P,4
#        A,4,T,5
#        A,5,V,6
#        A,6,F,7
#
    my $mapFL= shift @_;
    my %map;
    open (INPUT, "<$mapFL")or die ("Cannot open $mapFL:$!");
    while(<INPUT>){
        s/[\n\r]//gm;
        if (/^\w+,\d+,/){
            my ($chainID,$seqResNum, $aa, $atomResNum) = split(/,/, $_);


            if (!defined $seqResNum){
                die ("seqResNum not defined. Check $mapFL:$!");

            }
            $map{$seqResNum}=$atomResNum;
        }
    }
    close INPUT;

    if (!%map){
        die("Nothing read from $mapFL:$!");
    }
    return \%map;

}
