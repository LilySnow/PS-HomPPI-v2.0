#!/usr/bin/perl -w
#
#Li Xue
#3/28/2010
#
#Check the new PPIDB. If the proteins in the input file exists in PPIDB, output their sequence and interface information.
#Input: the homo-complexes of query1:query2
#	example input format:
#	2p6b	B:D
#	1m63	F:B
#
#Output: the sequence and interface info of the queries, e.g., seq_int_qryComplexes.lst
#
#
# e.g.,
# perl searchNewPPIDB_parnterSpecific.pl ../searchNewPPIDB/example/trans208ChainPair_dimer.lst conf/config

use strict;
use File::Basename;

#my $homeDIR = 'H:';
our $homeDIR = '/home/lixue';

#---- new PPIDB data hierarchy
my $precomputedDIR =
  '/data/isubk/einstein/home/ppidev/ppidev/ppiInfoNew/asymmetric/precomputed';

if ( !-d $precomputedDIR ) {
    die("$precomputedDIR does not exist:$!");
}

my $s2cDIR = '/data/web_servers/lxue/S2C';

if ( !-d $s2cDIR ) {
    die("$s2cDIR does not exist:$!");
}

#------

my $searchNewPPIDBDIR = dirname($0);

#change this diretory according to where searchNewPPIDB is extracted.

my $distThresh_Default = 4;
my $rasaThr_Default    = 5;

my $inputFL  = shift @ARGV;
my $configFL = shift @ARGV;
my $basename = basename( $inputFL, ( '.lst', '.txt' ) );

if ( !$inputFL ) {
    die("Input file $inputFL does not exist:$!");
}

#new PPIDB data hierarchy
my $distancesDIR;

my $sequencesDIR = $precomputedDIR . '/sequences';
my $rasaDIR      = $precomputedDIR . '/rasaBeforeComplexation';
my $distThresh;
my $rasaThr;         #[0-100]
my $outDIR;
my $interfaceDef;    # eg., $interfaceDef = atomDistances

#set parameters
if ($configFL) {

   #read config file to get interface definition parameters and output directory
    ( $interfaceDef, $distThresh, $rasaThr, $outDIR ) =
      &readConfigFL($configFL);

    if ( !defined $distThresh ) {
        print
"config file does not specify distance threshold. Now use the default value.\n";
        $distThresh = $distThresh_Default;
    }
    if ( !defined $rasaThr ) {
        print
"config file does not specify RASA threshold. Now use the default value.\n";
        $rasaThr = $rasaThr_Default;
    }
    if ( !defined $outDIR ) {
        print
          "config file does not specify outDIR. Now use the default value.\n";
        $outDIR = "$searchNewPPIDBDIR/out";
    }
    if ( !defined $interfaceDef ) {
        print
          "config file does not specify int Def. Now use the default value.\n";
        $interfaceDef = 'atomDistances';
    }
}
else {

    #default parameter values

    $interfaceDef = 'atomDistances';
    $distThresh   = $distThresh_Default;
    $rasaThr      = $rasaThr_Default;
    $outDIR       = "$searchNewPPIDBDIR/out";

}

$distancesDIR = $precomputedDIR . '/distances' . "/$interfaceDef";

my $outputFL = "$outDIR/seq_int_qryComplexes_$basename.lst";

# process starts
my $PDBID;
my $chainID1;
my $chainID2;
my $ATOMindex
  ; #array ref. the index of aa in $seq of PPIDB. Some aa may be absent from PDB file.
my $totalNum = 0;    #The total number of protein chains in the input file
my $num1     = 0;    # The number of sequences in the output file
my $num2     = 0;    # The number of sequences that does not exist in New PPIDB
my $num3     = 0;    # The number of queries that have the same chain IDs

#
open( INPUT, "<$inputFL" ) || die("Cannot open $inputFL:$!");
&header_outputFL( $outputFL, $interfaceDef, $distThresh, $rasaThr );

foreach (<INPUT>) {
    s/[\r\n]//mg;

    #read PDBID and chainID
    if (/^(\w{4})[\t\s]+(\w{1}):(\w{1})/) {

        $totalNum++;

        $PDBID    = lc($1);
        $chainID1 = $2;
        $chainID2 = $3;

        print "Searching new PPIDB for ......  $_\n";

        #
        if ( $chainID1 eq $chainID2 ) {

            #if the two chains are the same chain, go to next query complexes.

            $num3++;
            print
"$PDBID\t$chainID1:$chainID2 contains the same chain IDs. PPIDB does not contain the interaction information between the same chain.\n";
            next;
        }

        #get interface and seq for $chainID1
        my ( $seq1, $int1 ) =
          &getIntSeq( $sequencesDIR, $PDBID, $chainID1, $chainID2 );
        if ($seq1) {
            $num1++;
            &writeOutputFL_chainSpec( $int1, $seq1, $PDBID, $chainID1,
                $chainID2, $outputFL );
        }
        else {
            $num2++;
            print "$PDBID $chainID1:$chainID2 does not exist in new PPIDB!\n";
        }

        #get interface and seq for $chainID2
        my ( $seq2, $int2 ) =
          &getIntSeq( $sequencesDIR, $PDBID, $chainID2, $chainID1 );
        if (defined $seq2) {
            $num1++;
            &writeOutputFL_chainSpec( $int2, $seq2, $PDBID, $chainID2,
                $chainID1, $outputFL );
        }
        else {
            $num2++;
            print "$PDBID $chainID2 does not exist in new PPIDB.!\n";
        }

    }

}
close(INPUT);

##remove the absolute path
#if ( $outputFL =~ /HomPPI\/data\// ) {
#	($outputFL) = $outputFL =~ /(HomPPI\/data\/.+$)/;
#}

#
print
"Searching PPIDB is finished. The distance threshold: $distThresh, RASA threshold:	$rasaThr\%.\n";

print
"$outputFL is generated. Total $totalNum query complexes. Total $num1 seq and int in $outputFL, and $num2 seq and int do not exist in new PPIDB.$num3 queries have the same chain IDs and no info from new PPIDB is returned for them.\n\n\n";

#---------------------------
sub getIntSeq {

    #return $fastaSeq and $interface of $chainID1.

    my ( $sequencesDIR, $PDBID, $chainID1, $chainID2 ) = @_;
    my $fastaSeq;
    my $interface;

    #	$PDBID='1ml0';#xue
    my $seqFL = $sequencesDIR . "/$PDBID" . '.seq';

    if ( !-e $seqFL ) {
        return ( $fastaSeq, $interface );
    }
    else {

        #extract sequence info of chainID1 from new PPIDB
        my ( $seq1, $ATOMindex ) =
          &extractSeqFromPPIDB( $sequencesDIR, $seqFL, $chainID1 );
        my ( $seq2, $ATOMindex2 ) =
          &extractSeqFromPPIDB( $sequencesDIR, $seqFL, $chainID2 );

        #read s2c files
        my ( $s2c_residues, $SEQRESresinum, $ATOMresinum ) =
          &readS2Cfile( $PDBID, $chainID1, $s2cDIR );

        $fastaSeq = join( '', @$s2c_residues );
#                if ( scalar @$s2c_residues ne scalar @int ) {
#
#                    #s2c seq and the ppidb seq have different lengths
#                    print
#"WARNING: For $PDBID $chainID1, s2c seq and the ppidb seq have difference lengths! Probably something wrong with this s2c entry. Skip this query.\n";
#
#                    return;
#
#                }



        if ( !defined $seq1 || !defined $seq2 ) {

            #did not find the Chain ID in $seqFL
            return ( $fastaSeq, $interface )
              ;    #return undefined $fastaSeq, $interface
        }

        else {

            #extract interface info from new PPIDB
            my @int =
              &extractIntFromPPIDB_chainSpecific( $distancesDIR, $rasaDIR,
                $rasaThr, $distThresh, $PDBID, $chainID1, $chainID2 );

            if ( !@int ) {

#@int is empty. $chainID is not in $PDBID.dis file of PPIDB, because it has no int at all.
                $interface = '0' x length($fastaSeq);
            }

            else {

                #
                my %int_atomResiNum;
                @int_atomResiNum{@$ATOMindex} = @int;

                #
                my $newInt =
                  &mapInt2fasta( \%int_atomResiNum, $s2c_residues,
                    $ATOMresinum );
                $interface = join( '', @$newInt );
            }

            #
        }

    }

    return ( $fastaSeq, $interface );

}

sub readConfigFL {

   #read config file to get interface definition parameters and output directory

    my $configFL = shift @_;
    my $interfaceDef;
    my $distThresh;
    my $outDIR;

    open( CONFIG, "<$configFL" ) || die("cannot open $configFL:$!\n");
    foreach (<CONFIG>) {
        s/[\n\r]//mg;
        if (/^#/) {
            next;
        }
        if (/^interfaceDefinition[\s\t]{0,}=[\s\t]{0,}(\w+)/)

          #interfaceDefinition = atomDistances
        {
            $interfaceDef = $1;
            next;
        }
        if (/^distanceThreshold[\s\t]{0,}=[\s\t]{0,}([\d\.e\-]+)/) {
            $distThresh = $1;
            next;
        }

        if (/^rasaThr[\s\t]{0,}=[\s\t]{0,}([\d\.\-e]+)/) {
            $rasaThr = $1;
            next;
        }
        if (/^outDir[\s\t]{0,}=[\s\t]{0,}(.+)/) {
            $outDIR = $1;
            next;
        }
    }
    close(CONFIG);
    return ( $interfaceDef, $distThresh, $rasaThr, $outDIR );
}

sub extractSeqFromPPIDB {

    #extract sequence info from new PPIDB
    my $sequencesDIR = shift @_;
    my $seqFL        = shift @_;
    my $chainID      = shift @_;

    my $seq;
    my $index
      ;  #the index of aa in $seq of PPIDB. Some aa may be absent from PDB file.

    if ( -e $seqFL ) {
        open( SEQ, "<$seqFL" ) || die("Cannot open $seqFL:$!\n");
    }
    else {
        print "$PDBID $chainID1 does not exist in new PPIDB!\n";
        return;
    }

    my $flag = 0;
    foreach my $line (<SEQ>) {
        $line =~ s/[\r\n]//mg;    #remove the new line symbol

        #		print "$line\n";#xue
        if ( $line =~ /\w{0,}:$chainID,([A-Za-z]+)/ ) {
            $seq  = $1;
            $flag = 1;
            next;
        }

        #		if ( $flag == 1 && $line =~ /^[\s\t\d,\-]+$/ ) {
        if ( $flag == 1 && $line =~ /^[\s\da-zA-Z\-]+,/ ) {
            $line =~ s/\s//g;
            @$index = split( /,/, $line );
            $flag = 0;    #reset $flag
            last;
        }
    }
    close(SEQ);

    return ( $seq, $index );
}

sub extractIntFromPPIDB_chainSpecific {

    #extract interfaces of $chainID1 that interacts with $chainID2
    #read distance file and rasa file and extract interface info from new PPIDB

    my $distancesDIR = shift @_;
    my $rasaDIR      = shift @_;
    my $rasaThr      = shift @_;
    my $distThresh   = shift @_;
    my $PDBID        = shift @_;
    my $chainID1     = shift @_;
    my $chainID2     = shift @_;

    my @int;

    #read distance file and extract interface info from new PPIDB

    my @int_dist =
      &readDistFL_chainSpe( $distancesDIR, $distThresh, $PDBID, $chainID1,
        $chainID2 );

    if ( !@int_dist ) {

        #@int_dist is empty. $chainID is not in $PDBID.dis file of PPIDB.
        #print "$chainID does not exist in dist file of PPIDB of $PDBID.\n";
        return @int;
    }

    #read RASA files to determine Surface residues
    my @surfaces =
      &extractSurfaceFromPPIDB( $rasaDIR, $rasaThr, $PDBID, $chainID1 );

    #get interfaces on the surfaces

    for ( my $i = 0 ; $i <= $#surfaces ; $i++ ) {

        #				print "i: $i\n";
        #				print "int_dist: $int_dist[$i]\n";
        #				print "surfaces: $surfaces[$i]\n";#xue
        #				print "---\n";#xue

        if ( !defined $int_dist[$i] ) {
            print "$PDBID\t$chainID1:$chainID2\n";    #xue
            exit;
        }

        push @int, $int_dist[$i] & $surfaces[$i];
    }

    return @int;

}

sub extractSurfaceFromPPIDB {

    #read RASA files to determine Surface residues

    my $rasaDIR = shift @_;
    my $rasaThr = shift @_;
    my $PDBID   = shift @_;
    my $chainID = shift @_;
    my $rasaFL  = $rasaDIR . "/$PDBID" . '.rsa';
    my @surfaces;

    open( RASAFL, "<$rasaFL" ) || die("Cannot open $rasaFL:$!");
    foreach (<RASAFL>) {

        s/[\n\r]//;

        if (/^\w{0,}:$chainID,([\d\.\-,]+)/) {
            my @rasaLine = split( /,/, $1 );

            #
            foreach my $rasa (@rasaLine) {
                if ( $rasa >= $rasaThr )    #it is a surface residue
                {
                    push @surfaces, 1;
                }
                else {
                    push @surfaces, 0;
                }
            }
            last;

        }
    }

    return @surfaces;

}

sub readDistFL_chainSpe {

    #read distance file and extract interface info

#format of DistFL
# :A,:B,41:6.9002,,41:3.60848,,,,,,,
#  41 is the residue in chain B,  The residue in chain A is the first residue in the sequence file.
# ",," means that the distance is larger than 13 angstrom

    my $distancesDIR = shift @_;
    my $distThresh   = shift @_;
    my $PDBID        = shift @_;
    my $chainID1     = shift @_;
    my $chainID2     = shift @_;

    #	my $modelID      = shift @_;
    my $flag = 0
      ; #flag=1: $chainID1:$chainID2 dist info exists; flag=0: $chainID1:$chainID2 dist info does not exist(The distance between two chains are very far away.).

    my $distFL = $distancesDIR . "/$PDBID" . '.dis';

    #	my $distFL = $distancesDIR . "/$modelID" . '.atom';
    my @int_dist;    #interface determined by distance
    my @temp;

    open( DISTFL, "<$distFL" ) || die("Cannot open $distFL:$!\n");
    foreach (<DISTFL>) {

        #		print "$_";

        s/[\n\r]//mg;

        if (/^\w{0,}:$chainID1,\w{0,}:$chainID2,([:\d\.\-,]+)$/) {

            $flag = 1;
            my $distLine = $1;

            if ( substr( $distLine, length($distLine) - 1, 1 ) eq ',' ) {

     #if the last symbol of $1 is ',', for example, :A,:B,41:6.9002,,41:3.60848,
     #after 41:3.60848 there is another distance that is very large
                $distLine = $distLine . ',9999';
                @temp = split( /,/, $distLine );
                pop @temp;    #get rid of the last element '9999'

            }
            else {

                @temp = split( /,/, $distLine );
            }

            for ( my $i = 0 ; $i < scalar @temp ; $i++ ) {

                #				print "$temp[$i]\n";

                my ($distance) = $temp[$i] =~ /:([\.\d]+)$/;

                if ( !$distance ) {

                    #the distance is very large
                    $int_dist[$i] = 0;    #$i is not an interface residue
                    next;
                }

                if ( $distance <= $distThresh ) {
                    $int_dist[$i] = 1;    # 	$i is an interface residue
                }
                else {
                    $int_dist[$i] = 0;    # 	$i is not an interface residue
                }
            }
            last;
        }
    }
    close(DISTFL);

#	if($flag==0){
#    #$chainID1:$chainID2 dist info does not exist(The distance between two chains are very far away.).
#		@int_dist= '0' x ;
#	}

    return (@int_dist);

}

sub readDistFL_chainSpe2 {

    #This script processes old version of dist file in PPIDB

    #read distance file and extract interface info from new PPIDB

#format of DistFL
#    :A,:B,35:10.3674,.....-1:9999, .....
#  35 is the residue in chain B,  The residue in chain A is the first residue in the sequence file.

    my $distancesDIR = shift @_;
    my $distThresh   = shift @_;
    my $PDBID        = shift @_;
    my $chainID1     = shift @_;
    my $chainID2     = shift @_;
    my $distFL       = $distancesDIR . "/$PDBID" . '.dis';
    my @int_dist;    #interface determined by distance

    open( DISTFL, "<$distFL" ) || die("Cannot open $distFL!\n");
    foreach (<DISTFL>) {

        s/[\n\r]//mg;

        if (/^\w{0,}:$chainID1,\w{0,}:$chainID2,([:\d\.\-,]+)/) {

            my @temp = split( /[,:]/, $1 );

            for ( my $i = 0 ; $i < ( $#temp + 1 ) / 2 ; $i++ ) {

                my $distance = $temp[ 2 * $i + 1 ];

                if ( $distance <= $distThresh ) {
                    $int_dist[$i] = 1;    # 	$i is an interface residue
                }
                else {
                    $int_dist[$i] = 0;    # 	$i is not an interface residue
                }
            }
            last;
        }
    }
    close(DISTFL);

    return (@int_dist);

}

sub writeOutputFL_chainSpec {

    #	(\%int,$PDBID,$chainID);
    #read the complete fasta file into a hash and compare with %int
    #for aa that are in %int, write the outputfile accordingly;
    #for aa that are not in %int, use "?" to denote the interface.

    my $interface = shift @_;
    my $seq       = shift @_;
    my $PDBID     = shift @_;
    my $chainID1  = shift @_;
    my $chainID2  = shift @_;
    my $outputFL  = shift @_;

    open( OUTPUT, ">>$outputFL" ) || die("Cannot open $outputFL!\n");
    print OUTPUT ">$PDBID$chainID1|$chainID1:$chainID2\n";
    print OUTPUT "$seq\n";
    print OUTPUT "$interface\n";
    close(OUTPUT);

}

sub header_outputFL {
    my ( $outputFL, $interfaceDef, $distThresh, $rasaThr ) = @_;
    unlink($outputFL) if ( -e $outputFL );
    open( OUTPUT, ">>$outputFL" ) || die("Cannot open $outputFL!\n");
    print OUTPUT
"#=========================================================================================================\n";
    print OUTPUT "# auto generated file  by author lixue\@iastate.edu\n";
    print OUTPUT "# Format description:\n";
    print OUTPUT "# >Protein name(PDBid + chainID)|ChainID:ChainB\n";
    print OUTPUT
"# Amino acid sequence in new PPIDB, which does not contain aa that is not among 20 types.\n";
    print OUTPUT
"# (non)interface of the protein: 1s denote interface residues, 0s denote non-interface residue\n";
    print OUTPUT "# interfaceDef: $interfaceDef\n";
    print OUTPUT "# distThresh: $distThresh\n";
    print OUTPUT "# rasaThr: $rasaThr\n";
    print OUTPUT
"#=========================================================================================================\n";
    close(OUTPUT);
}

sub readS2Cfile {
    my $pdbID   = shift @_;
    my $chainID = shift @_;
    my $s2cDIR  = shift @_;
    my $s2cFL   = $s2cDIR . "/$pdbID.sc";
    my @residues;
    my @SEQRESresinum;
    my @ATOMresinum;

    open( S2C, "<$s2cFL" ) || die("Cannot open $s2cFL\n");
    foreach (<S2C>) {
        if (/^SEQCRD $chainID/) {

            #			$chainID=substr($_,7,1);
            push @residues,      substr( $_, 9,  1 );
            push @SEQRESresinum, substr( $_, 19, 5 );

            my ($temp) = substr( $_, 25, 6 ) =~ /([^\s\t]+)/;
            push @ATOMresinum, $temp;

        }
    }

    #remove space in @ATOMresinum

    return ( \@residues, \@SEQRESresinum, \@ATOMresinum );
}

sub mapInt2fasta {
    my $int_atomResiNum_ref = shift @_;
    my $residues_ref        = shift @_;    # in the order of fasta.
    my $ATOMresinum_ref     = shift @_;
    my $int;

    for ( my $i = 0 ; $i < scalar @$residues_ref ; $i++ ) {

        # the residue is missing from the structure
        if ( $ATOMresinum_ref->[$i] eq '-' ) {
            $int->[$i] = '?';
            next;
        }

        #no interface info for this residue if it is not among 20 types aa
        elsif ( !exists $int_atomResiNum_ref->{ $ATOMresinum_ref->[$i] } ) {
            $int->[$i] = '?';
            next;
        }

        #there is interface info for this residue
        else {
            $int->[$i] = $int_atomResiNum_ref->{ $ATOMresinum_ref->[$i] };
        }

    }
    return $int;
}
